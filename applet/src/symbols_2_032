
gfx_drawtext                           = 0x800D88B;
gfx_drawbmp                            = 0x8022887;
gfx_drawtext2                          = 0x801cf1d;
gfx_chars_to_display                   = 0x801cf1d;

gfx_select_font                        = 0x8020975;
gfx_set_bg_color                       = 0x801c5e1;
gfx_set_fg_color                       = 0x801c5e9;
gfx_blockfill                          = 0x801cb05;

/* Function that handles the end of a DMR call. */
dmr_call_end                           = 0x803f33d;
/* Function that handles a DMR call. */
dmr_call_start                         = 0x0803ec87;
/* Function that handles a DMR SMS. */
dmr_handle_data                        = 0x0804b66d;
/* Function that handles an incoming SMS. */
dmr_sms_arrive                         = 0x0803f03d;
/* //! Function that applies a squelch. */
dmr_apply_squelch                      = 0x080303b5;
/* //! Called before unsquelching. */
dmr_before_squelch                     = 0x0803ef6d;



/* Handle to the original (unhooked) upload handler. */
usb_upld_handle = 0x0808d3d9;
/* This returns a USB packet to the host from the upload handler. */
usb_send_packet = 0x080577af;


/* Original handler for the DFU DNLD event. */
usb_dnld_handle = 0x0808ccbf;

/* spi-flash */
md380_spiflash_read                    = 0x802fd83;
md380_spiflash_write                   = 0x802fe6b;
md380_spiflash_security_registers_read = 0x80301bd;
md380_spiflash_enable                  = 0x802fe37;
md380_spiflash_disable                 = 0x802fe53;
md380_spiflash_wait                    = 0x802fe15;
md380_spiflash_block_erase64k          = 0x802fbb7;
md380_spiflash_sektor_erase4k          = 0x802fb83;
md380_spi_sendrecv                     = 0x802fdc9;


/* Function that handles uC/OS-II settings */

OSTaskCreateExt   = 0x804bbf5;
OSTaskNameSet     = 0x804bcc1;

OS_ENTER_CRITICAL = 0x08041df9;
OS_EXIT_CRITICAL  = 0x08041e01;

/* OSSem Create Hook used the place from 2 OSSemCreate Calls */
OSSemCreate       = 0x803da2c+1;
OSSemPend         = 0x803da78+1;
OSSemPost         = 0x803db68+1;

md380_OSMboxPost = 0x080303b4+1;

/* //! Functions and Variabes regarding the menu */
main_menu                              = 0x8039c23;
md380_create_menu_entry                = 0x800c731;
md380_create_main_meny_entry           = 0x800c189;
md380_menu_numerical_input             = 0x801a2d6;
md380_create_menu_entry                = 0x800c731  ; 
md380_menu_entry_back                  = 0x800f452;
md380_menu_entry_programradio          = 0x80127d0;

md380_menu_0x200011e4                  = 0x200011e4;
md380_menu_0x2001d3c1                  = 0x2001d3c1;
md380_menu_0x2001d3ed                  = 0x2001d3ed;
md380_menu_0x2001d3ee                  = 0x2001d3ee;
md380_menu_0x2001d3ef                  = 0x2001d3ef;
md380_menu_0x2001d3f0                  = 0x2001d3f0;
md380_menu_0x2001d3f1                  = 0x2001d3f1;
md380_menu_0x2001d3f4                  = 0x2001d3f4;
md380_menu_depth                       = 0x200011e4;
md380_menu_entry_selected              = 0x2001d3b2;
md380_menu_id                          = 0x2001d3c2;
md380_program_radio_unprohibited       = 0x2001d030 + 4;
md380_wt_programradio                  = 0x080d175c;
md380_menu_0x20001114                  = 0x20001114;

/* c5000 */
c5000_spi0_readreg = 0x0803e2f5;
c5000_spi0_writereg = 0x0803e2a9;

/* aes */
aes_cipher = 0x080356b1;

/* Unknown AMBE2+ thing. */
ambe_encode_thing = 0x08050d91;
/* Decodes an AMBE2+ frame into bits. */
ambe_unpack = 0x08048c9d;

/* Populates the audio buffer */
ambe_decode_wav = 0x08051249;


/* useful md380 firmware functions */
md380_itow = 0x080172ed;
md380_RTC_GetDate = 0x08026461;
md380_RTC_GetTime = 0x0802634b;
read_channel_switch = 0x0804d269;

/* useful md380 variables */
md380_dmr_id = 0x2001c65c;  /* the own dmr-id */

/* Functions and Variabes from the "RTC Timer" - task */
md380_f_4137 = 0x080290c8+1;
md380_f_4520 = 0x08027ae8+1;
md380_f_4098 = 0x0804c1d0+1;
md380_f_4102 = 0x0804c2aa+1;
md380_f_4225 = 0x0801f044+1;


