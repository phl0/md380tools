/* This file contains symbols for version D02.032 of the firmware. */

/* For maximum portability, try to use only symbols that cleanly */
/* port to other versions.  Good candidates have long prologues. */

/* Startup routines, very handy for hooking our startup. */
startup_topline = 0x08021883;
startup_botline = 0x08021895;

/* Graphics functions. */
gfx_drawtext                           = 0x800D88B;
gfx_drawbmp                            = 0x8022887;
gfx_drawtext2                          = 0x801cf1d;
gfx_chars_to_display                   = 0x801cf1d;

gfx_select_font                        = 0x8020975;
gfx_set_bg_color                       = 0x801c5e1;
gfx_set_fg_color                       = 0x801c5e9;
gfx_blockfill                          = 0x801cb05;

/* Function that handles the end of a DMR call. */
dmr_call_end                           = 0x803f33d;
/* Function that handles a DMR call. */
dmr_call_start                         = 0x0803ec87;
/* Function that handles a DMR SMS. */
dmr_handle_data                        = 0x0804b66d;
/* Function that handles an incoming SMS. */
dmr_sms_arrive                         = 0x0803f03d;
/* Called before unsquelching. */
dmr_before_squelch                     = 0x0803ef6d;



/* Upload and download handlers. */
usb_upld_handle = 0x0808d3d9;
usb_dnld_handle = 0x0808ccbf;

/* This returns a USB packet to the host from the upload handler. */
usb_send_packet = 0x080577af;

/* Higher-level USB functions.  These need stub hooks. */
usb_modestring = 0x080969bd;
usb_manufacturer = 0x080969df;
usb_serialnumber = 0x080969ef;
usb_setcallbacks = 0x08052c0d;
usb_do_setup = 0x0808cc01;

/* USB DFU functions. */
usb_dfu_write = 0x0808e441;
usb_dfu_read = 0x0808e491;


/* spi-flash */
md380_spiflash_read                    = 0x802fd83;
md380_spiflash_write                   = 0x802fe6b;
md380_spiflash_security_registers_read = 0x80301bd;
md380_spiflash_enable                  = 0x802fe37;
md380_spiflash_disable                 = 0x802fe53;
md380_spiflash_wait                    = 0x802fe15;
md380_spiflash_block_erase64k          = 0x802fbb7;
md380_spiflash_sektor_erase4k          = 0x802fb83;
md380_spi_sendrecv                     = 0x802fdc9;



/* i2c */
md380_I2C_GenerateSTART                = 0x804fdc5;
md380_I2C_GenerateSTOP                 = 0x804fde1;
md380_I2C_ReceiveData                  = 0x804fe19;
md380_I2C_Send7bitAddress              = 0x804fdfd;
md380_I2C_SendData                     = 0x804fe13;

/* Function that handles uC/OS-II settings */
OSTaskCreateExt   = 0x804bbf5;
OSTaskNameSet     = 0x804bcc1;

OS_ENTER_CRITICAL = 0x08041df9;
OS_EXIT_CRITICAL  = 0x08041e01;

OSSemCreate       = 0x803da2d;

/* OSSem Create Hook used the place from 2 OSSemCreate Calls */
OSSemCreate_hook0_event_mem =	0x2001d124; /* from D002.032 @ 0x80441fa func 0x8044172 */
OSSemCreate_hook1_event_mem =	0x2001d128; /* from D002.032 @ 0x8044206 func 0x8044172 */

OSSemPend         = 0x803da79;
OSSemPost         = 0x803db69;

md380_OSMboxPost = 0x080303b5;



/* //! Functions and Variabes regarding the menu */
main_menu                              = 0x8039c23;
md380_create_menu_entry                = 0x800c731;
md380_create_main_meny_entry           = 0x800c189;
md380_menu_numerical_input             = 0x801a2d6;
md380_create_menu_entry                = 0x800c731;
md380_menu_entry_back                  = 0x800f452;
md380_menu_entry_programradio          = 0x80127d0;

md380_menu_0x200011e4                  = 0x200011e4; /* from D002.032 @ 0x80127f4 func 0x80127d0 */
md380_menu_0x2001d3c1                  = 0x2001d3c1; /* from D002.032 @ 0x8012a7a func 0x80127d0 */
md380_menu_0x2001d3ed                  = 0x2001d3ed; /* from D002.032 @ 0x8012ab2 func 0x80127d0 */
md380_menu_0x2001d3ee                  = 0x2001d3ee; /* from D002.032 @ 0x8012aba func 0x80127d0 */
md380_menu_0x2001d3ef                  = 0x2001d3ef; /* from D002.032 @ 0x8012ac2 func 0x80127d0 */
md380_menu_0x2001d3f0                  = 0x2001d3f0; /* from D002.032 @ 0x8012ad2 func 0x80127d0 */
md380_menu_0x2001d3f1                  = 0x2001d3f1; /* from D002.032 @ 0x8012aca func 0x80127d0 */
md380_menu_0x2001d3f4                  = 0x2001d3f4; /* from D002.032 @ 0x8012a86 func 0x80127d0 */
md380_menu_depth                       = 0x200011e4; /* from D002.032 @ 0x8012ada func 0x80127d0 */

md380_menu_entry_selected              = 0x2001d3b2; /* from D002.032 @ 0x801a038 func 0x8019fd0 */
md380_menu_id                          = 0x2001d3c2; /* from D002.032 @ 0x801a00c func 0x8019fd0 */
md380_program_radio_unprohibited       = 0x2001d030; /* from D002.032 @ 0x8012740 func 0x80126a8 */
md380_wt_programradio                  = 0x080d175c;
md380_menu_0x20001114		       = 0x20001114; /* from D002.032 @ 0x802c566 func 0x802c55e */
md380_menu_mem_base		       = 0x20019df0; /* from D002.032 @ 0x801a014 func 0x8019fd0 */
md380_menu_memory	               = 0x2001c148; /* from D002.032 @ 0x8019fda func 0x8019fd0 */
md380_menu_edit_buf		       = 0x2001b716; /* from D002.032 @ 0x802c9a8 func 0x802c99c */

/* c5000 */
c5000_spi0_readreg = 0x0803e2f5;
c5000_spi0_writereg = 0x0803e2a9;

/* aes */
aes_loadkey = 0x08035739;
aes_cipher = 0x080356b1;
aes_startup_check = 0x0802168d;

/* Unknown AMBE2+ thing. */
ambe_encode_thing = 0x08050d91;
/* Decodes an AMBE2+ frame into bits. */
ambe_unpack = 0x08048c9d;

/* Populates the audio buffer */
ambe_decode_wav = 0x08051249;


/* useful md380 firmware functions and variables*/
md380_itow = 0x080172ed;
md380_RTC_GetDate = 0x08026461;
md380_RTC_GetTime = 0x0802634b;
read_channel_switch = 0x0804d269;
channelnum = 0x2001d376; /* D002.032 @ 0x0804d35c func 0x804d338 */

/* useful md380 variables */

md380_radio_config = 0x2001c658; /* from D002.032 @ 0x0803eefe func 0x803ec86 */

/* stuff to handle different display (flip (380/390) type */
md380_copy_spiflash_security_bank2_to_ram = 0x8021655;

/* from the spiflash Security Registers */
md380_radio_config_bank2 = 0x2001c974; /* from D002.032 @ 0x0802165c func 0x8021654 */

 
/* Functions and Variabes from the "RTC Timer" - task */
md380_f_4137 = 0x080290c9;
md380_f_4520 = 0x08027ae9;
md380_f_4098 = 0x0804c1d1;
md380_f_4102 = 0x0804c2ab;
md380_f_4225 = 0x0801f045;

/* relevant display functions */
Write_Command_2display = 0x08031f75;
Write_Data_2display = 0x08031f7d;

/* Chinese font region. */
chinese_font = 0x0809D000;

/* Determines the squelching of an incoming call. */
dmr_squelch_mode	=	0x2001d35f; /* from D002.032 @ 0x0803ed30 func 0x803ec86 */
/* Unknown function involved in squelching. */
dmr_squelch_firstthing	=	0x2001d118; /* from D002.032 @ 0x0803ee9a func 0x803ec86 */

/* Function pointer at this address calls DNLD. */
dnld_tohook		= 	0x20000e9c;  /* i'cant find */

/* Pointer to the buffer that stores the bottom line of screen text. */
botlinetext		=	0x2001cee0; /* from D002.032 @ 0x0802189c func 0x8021894 */

/* ROM copy of the welcome bitmap. */
welcomebmp		=	0x080f9ca8;

/* Variabes regarding the beep_process. */
beep_process_unkown	=	0x2001d178; /* from D002.032 @ 0x0802ba58 func 0x802ba44 */

/* Variabes regarding rtc_timer process. */
md380_f_4225_operatingmode =	0x2001d3f7;  /* from D002.032 @ 0x0803ba0e func 0x803b524 */
md380_f_4225_operatingmode_menu = 0x1b;       /*  see 0x0801f06a there are a lot of modes */
md380_f_4225_operatingmode_menu_exit = 0x1c;
